/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */

// ConvertTo-TS run at 2016-10-04T11:27:14.7372254-07:00

// import org.junit.Test;

// import static org.junit.Assert.assertEquals;

export class TestParserInterpreter extends BaseTest {
	@Test testEmptyStartRule(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s :  ;",
			lg);

		testInterp(lg, g, "s", "", "s");
		testInterp(lg, g, "s", "a", "s");
	}

	@Test testA(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : A ;",
			lg);

		let t: ParseTree =  testInterp(lg, g, "s", "a", "(s a)");
		assertEquals("0..0", t.getSourceInterval().toString());
	}

	@Test testEOF(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : A EOF ;",
			lg);

		let t: ParseTree =  testInterp(lg, g, "s", "a", "(s a <EOF>)");
		assertEquals("0..1", t.getSourceInterval().toString());
	}

	@Test testEOFInChild(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : x ;\n" +
			"x : A EOF ;",
			lg);

		let t: ParseTree =  testInterp(lg, g, "s", "a", "(s (x a <EOF>))");
		assertEquals("0..1", t.getSourceInterval().toString());
		assertEquals("0..1", t.getChild(0).getSourceInterval().toString());
	}

	@Test testEmptyRuleAfterEOFInChild(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : x y;\n" +
			"x : A EOF ;\n" +
			"y : ;",
			lg);

		let t: ParseTree =  testInterp(lg, g, "s", "a", "(s (x a <EOF>) y)");
		assertEquals("0..1", t.getSourceInterval().toString()); // s
		assertEquals("0..1", t.getChild(0).getSourceInterval().toString()); // x
// unspecified		assertEquals("1..0", t.getChild(1).getSourceInterval().toString()); // y
	}

	@Test testEmptyRuleAfterJustEOFInChild(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : x y;\n" +
			"x : EOF ;\n" +
			"y : ;",
			lg);

		let t: ParseTree =  testInterp(lg, g, "s", "", "(s (x <EOF>) y)");
		assertEquals("0..0", t.getSourceInterval().toString()); // s
		assertEquals("0..0", t.getChild(0).getSourceInterval().toString()); // x
		// this next one is a weird special case where somebody tries to match beyond in the file
// unspecified		assertEquals("0..-1", t.getChild(1).getSourceInterval().toString()); // y
	}

	@Test testEmptyInput(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : x EOF ;\n" +
			"x : ;\n",
			lg);

		let t: ParseTree =  testInterp(lg, g, "s", "", "(s x <EOF>)");
		assertEquals("0..0", t.getSourceInterval().toString()); // s
		assertEquals("0..-1", t.getChild(0).getSourceInterval().toString()); // x
	}

	@Test testEmptyInputWithCallsAfter(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : x y ;\n" +
			"x : EOF ;\n" +
			"y : z ;\n" +
			"z : ;",
			lg);

		let t: ParseTree =  testInterp(lg, g, "s", "", "(s (x <EOF>) (y z))");
		assertEquals("0..0", t.getSourceInterval().toString()); // s
		assertEquals("0..0", t.getChild(0).getSourceInterval().toString()); // x
// unspecified		assertEquals("0..-1", t.getChild(1).getSourceInterval().toString()); // x
	}

	@Test testEmptyFirstRule(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : x A ;\n" +
			"x : ;\n",
			lg);

		let t: ParseTree =  testInterp(lg, g, "s", "a", "(s x a)");
		assertEquals("0..0", t.getSourceInterval().toString()); // s
		// This gets an empty interval because the stop token is null for x
		assertEquals("0..-1", t.getChild(0).getSourceInterval().toString()); // x
	}

	@Test testAorB(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"s : A{;} | B ;",
			lg);
		testInterp(lg, g, "s", "a", "(s a)");
		testInterp(lg, g, "s", "b", "(s b)");
	}

	@Test testCall(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"s : t C ;\n" +
			"t : A{;} | B ;\n",
			lg);

		testInterp(lg, g, "s", "ac", "(s (t a) c)");
		testInterp(lg, g, "s", "bc", "(s (t b) c)");
	}

	@Test testCall2(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"s : t C ;\n" +
			"t : u ;\n" +
			"u : A{;} | B ;\n",
			lg);

		testInterp(lg, g, "s", "ac", "(s (t (u a)) c)");
		testInterp(lg, g, "s", "bc", "(s (t (u b)) c)");
	}

	@Test testOptionalA(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : A? B ;\n",
			lg);

		testInterp(lg, g, "s", "b", "(s b)");
		testInterp(lg, g, "s", "ab", "(s a b)");
	}

	@Test testOptionalAorB(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : (A{;}|B)? C ;\n",
			lg);

		testInterp(lg, g, "s", "c", "(s c)");
		testInterp(lg, g, "s", "ac", "(s a c)");
		testInterp(lg, g, "s", "bc", "(s b c)");
	}

	@Test testStarA(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : A* B ;\n",
			lg);

		testInterp(lg, g, "s", "b", "(s b)");
		testInterp(lg, g, "s", "ab", "(s a b)");
		testInterp(lg, g, "s", "aaaaaab", "(s a a a a a a b)");
	}

	@Test testStarAorB(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : (A{;}|B)* C ;\n",
			lg);

		testInterp(lg, g, "s", "c", "(s c)");
		testInterp(lg, g, "s", "ac", "(s a c)");
		testInterp(lg, g, "s", "bc", "(s b c)");
		testInterp(lg, g, "s", "abaaabc", "(s a b a a a b c)");
		testInterp(lg, g, "s", "babac", "(s b a b a c)");
	}

	@Test testLeftRecursion(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n" +
			"PLUS : '+' ;\n" +
			"MULT : '*' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : e ;\n" +
			"e : e MULT e\n" +
			"  | e PLUS e\n" +
			"  | A\n" +
			"  ;\n",
			lg);

		testInterp(lg, g, "s", "a", 	"(s (e a))");
		testInterp(lg, g, "s", "a+a", 	"(s (e (e a) + (e a)))");
		testInterp(lg, g, "s", "a*a", 	"(s (e (e a) * (e a)))");
		testInterp(lg, g, "s", "a+a+a", "(s (e (e (e a) + (e a)) + (e a)))");
		testInterp(lg, g, "s", "a*a+a", "(s (e (e (e a) * (e a)) + (e a)))");
		testInterp(lg, g, "s", "a+a*a", "(s (e (e a) + (e (e a) * (e a))))");
	}

	/**
	 * This is a regression test for antlr/antlr4#461.
	 * https://github.com/antlr/antlr4/issues/461
	 */
	@Test testLeftRecursiveStartRule(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n" +
			"PLUS : '+' ;\n" +
			"MULT : '*' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n" +
			"s : e ;\n" +
			"e : e MULT e\n" +
			"  | e PLUS e\n" +
			"  | A\n" +
			"  ;\n",
			lg);

		testInterp(lg, g, "e", "a", 	"(e a)");
		testInterp(lg, g, "e", "a+a", 	"(e (e a) + (e a))");
		testInterp(lg, g, "e", "a*a", 	"(e (e a) * (e a))");
		testInterp(lg, g, "e", "a+a+a", "(e (e (e a) + (e a)) + (e a))");
		testInterp(lg, g, "e", "a*a+a", "(e (e (e a) * (e a)) + (e a))");
		testInterp(lg, g, "e", "a+a*a", "(e (e a) + (e (e a) * (e a)))");
	}

	testInterp(lg: LexerGrammar, g: Grammar, 
					startRule: string, input: string,
					expectedParseTree: string): ParseTree
	{
		let lexEngine: LexerInterpreter =  lg.createLexerInterpreter(new ANTLRInputStream(input));
		let tokens: CommonTokenStream =  new CommonTokenStream(lexEngine);
		let parser: ParserInterpreter =  g.createParserInterpreter(tokens);
		let t: ParseTree =  parser.parse(g.rules.get(startRule).index);
		console.log("parse tree: "+t.toStringTree(parser));
		assertEquals(expectedParseTree, t.toStringTree(parser));
		return t;
	}
}
