/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */

// ConvertTo-TS run at 2016-10-04T11:27:02.4734065-07:00

// import org.junit.Test;

/** */
@SuppressWarnings("unused")
export class TestActionTranslation extends BaseTest {
	let attributeTemplate: string = 
		"attributeTemplate(members,init,inline,finally,inline2) ::= <<\n" +
		"parser grammar A;\n"+
		"@members {#members#<members>#end-members#}\n" +
		"a[int x, int x1] returns [int y]\n" +
		"@init {#init#<init>#end-init#}\n" +
		"    :   id=ID ids+=ID lab=b[34] c d {\n" +
		"		 #inline#<inline>#end-inline#\n" +
		"		 }\n" +
		"		 c\n" +
		"    ;\n" +
		"    finally {#finally#<finally>#end-finally#}\n" +
		"b[int d] returns [int e]\n" +
		"    :   {#inline2#<inline2>#end-inline2#}\n" +
		"    ;\n" +
		"c returns [int x, int y] : ;\n" +
		"d	 :   ;\n" +
		">>";

    @Test testEscapedLessThanInAction(): void {
        let action: string =  "i<3; '<xmltag>'";
		let expected: string =  "i<3; '<xmltag>'";
		testActions(attributeTemplate, "members", action, expected);
		testActions(attributeTemplate, "init", action, expected);
		testActions(attributeTemplate, "inline", action, expected);
		testActions(attributeTemplate, "finally", action, expected);
		testActions(attributeTemplate, "inline2", action, expected);
    }

    @Test testEscaped$InAction(): void {
		let action: string =  "int \\$n; \"\\$in string\\$\"";
		let expected: string =  "int $n; \"$in string$\"";
		testActions(attributeTemplate, "members", action, expected);
		testActions(attributeTemplate, "init", action, expected);
		testActions(attributeTemplate, "inline", action, expected);
		testActions(attributeTemplate, "finally", action, expected);
		testActions(attributeTemplate, "inline2", action, expected);
    }

	/**
	 * Regression test for "in antlr v4 lexer, $ translation issue in action".
	 * https://github.com/antlr/antlr4/issues/176
	 */
	@Test testUnescaped$InAction(): void {
		let action: string =  "\\$string$";
		let expected: string =  "$string$";
		testActions(attributeTemplate, "members", action, expected);
		testActions(attributeTemplate, "init", action, expected);
		testActions(attributeTemplate, "inline", action, expected);
		testActions(attributeTemplate, "finally", action, expected);
		testActions(attributeTemplate, "inline2", action, expected);
	}

	@Test testEscapedSlash(): void {
		let action: string =  "x = '\\n';";  // x = '\n'; -> x = '\n';
		let expected: string =  "x = '\\n';";
		testActions(attributeTemplate, "members", action, expected);
		testActions(attributeTemplate, "init", action, expected);
		testActions(attributeTemplate, "inline", action, expected);
		testActions(attributeTemplate, "finally", action, expected);
		testActions(attributeTemplate, "inline2", action, expected);
	}

	@Test testComplicatedArgParsing(): void {
		let action: string =  "x, (*a).foo(21,33), 3.2+1, '\\n', "+
						"\"a,oo\\nick\", {bl, \"fdkj\"eck}";
		let expected: string =  "x, (*a).foo(21,33), 3.2+1, '\\n', "+
						"\"a,oo\\nick\", {bl, \"fdkj\"eck}";
		testActions(attributeTemplate, "members", action, expected);
		testActions(attributeTemplate, "init", action, expected);
		testActions(attributeTemplate, "inline", action, expected);
		testActions(attributeTemplate, "finally", action, expected);
		testActions(attributeTemplate, "inline2", action, expected);
	}

	@Test testComplicatedArgParsingWithTranslation(): void {
		let action: string =  "x, $ID.text+\"3242\", (*$ID).foo(21,33), 3.2+1, '\\n', "+
						"\"a,oo\\nick\", {bl, \"fdkj\"eck}";
		let expected: string = 
			"x, (_localctx.ID!=null?_localctx.ID.getText():null)+\"3242\", " +
			"(*_localctx.ID).foo(21,33), 3.2+1, '\\n', \"a,oo\\nick\", {bl, \"fdkj\"eck}";
		testActions(attributeTemplate, "inline", action, expected);
	}

	@Test testArguments(): void {
		let action: string =  "$x; $ctx.x";
		let expected: string =  "_localctx.x; _localctx.x";
		testActions(attributeTemplate, "inline", action, expected);
	}

	@Test testReturnValue(): void {
		let action: string =  "$y; $ctx.y";
		let expected: string =  "_localctx.y; _localctx.y";
		testActions(attributeTemplate, "inline", action, expected);
	}

	@Test testReturnValueWithNumber(): void {
		let action: string =  "$ctx.x1";
		let expected: string =  "_localctx.x1";
		testActions(attributeTemplate, "inline", action, expected);
	}

	@Test testReturnValuesCurrentRule(): void {
		let action: string =  "$y; $ctx.y;";
		let expected: string =  "_localctx.y; _localctx.y;";
		testActions(attributeTemplate, "inline", action, expected);
	}

	@Test testReturnValues(): void {
		let action: string =  "$lab.e; $b.e; $y.e = \"\";";
		let expected: string =  "_localctx.lab.e; _localctx.b.e; _localctx.y.e = \"\";";
		testActions(attributeTemplate, "inline", action, expected);
	}

    @Test testReturnWithMultipleRuleRefs(): void {
		let action: string =  "$c.x; $c.y;";
		let expected: string =  "_localctx.c.x; _localctx.c.y;";
		testActions(attributeTemplate, "inline", action, expected);
    }

    @Test testTokenRefs(): void {
		let action: string =  "$id; $ID; $id.text; $id.getText(); $id.line;";
		let expected: string =  "_localctx.id; _localctx.ID; (_localctx.id!=null?_localctx.id.getText():null); _localctx.id.getText(); (_localctx.id!=null?_localctx.id.getLine():0);";
		testActions(attributeTemplate, "inline", action, expected);
    }

    @Test testRuleRefs(): void {
        let action: string =  "$lab.start; $c.text;";
		let expected: string =  "(_localctx.lab!=null?(_localctx.lab.start):null); (_localctx.c!=null?_input.getText(_localctx.c.start,_localctx.c.stop):null);";
		testActions(attributeTemplate, "inline", action, expected);
    }

	@Test testRefToTextAttributeForCurrentRule(): void {
        let action: string =  "$ctx.text; $text";

		// this is the expected translation for all cases
		let expected: string = 
			"_localctx.text; _input.getText(_localctx.start, _input.LT(-1))";

		testActions(attributeTemplate, "init", action, expected);
		testActions(attributeTemplate, "inline", action, expected);
		testActions(attributeTemplate, "finally", action, expected);
    }

    @Test testEmptyActions(): void {
	    let gS: string = 
	   		"grammar A;\n"+
	   		"a[] : 'a' ;\n" +
	   		"c : a[] c[] ;\n";
	    let g: Grammar =  new Grammar(gS);
    }

    @Test testDynamicRuleScopeRefInSubrule(): void {
        let action: string =  "$a::n;";
    }
    @Test testRuleScopeFromAnotherRule(): void {
        let action: string =  "$a::n;"; // must be qualified
    }
    @Test testFullyQualifiedRefToCurrentRuleParameter(): void {
        let action: string =  "$a.i;";
    }
    @Test testFullyQualifiedRefToCurrentRuleRetVal(): void {
        let action: string =  "$a.i;";
    }
    @Test testSetFullyQualifiedRefToCurrentRuleRetVal(): void {
        let action: string =  "$a.i = 1;";
    }
    @Test testIsolatedRefToCurrentRule(): void {
        let action: string =  "$a;";
    }
    @Test testIsolatedRefToRule(): void {
        let action: string =  "$x;";
    }
    @Test testFullyQualifiedRefToLabelInCurrentRule(): void {
        let action: string =  "$a.x;";
    }
    @Test testFullyQualifiedRefToListLabelInCurrentRule(): void {
        let action: string =  "$a.x;"; // must be qualified
    }
    @Test testFullyQualifiedRefToTemplateAttributeInCurrentRule(): void {
        let action: string =  "$a.st;"; // can be qualified
    }
    @Test testRuleRefWhenRuleHasScope(): void {
        let action: string =  "$b.start;";
    }
    @Test testDynamicScopeRefOkEvenThoughRuleRefExists(): void {
        let action: string =  "$b::n;";
    }
    @Test testRefToTemplateAttributeForCurrentRule(): void {
        let action: string =  "$st=null;";
    }

    @Test testRefToStartAttributeForCurrentRule(): void {
        let action: string =  "$start;";
    }

    @Test testTokenLabelFromMultipleAlts(): void {
        let action: string =  "$ID.text;"; // must be qualified
    }
    @Test testRuleLabelFromMultipleAlts(): void {
        let action: string =  "$b.text;"; // must be qualified
    }
    @Test testUnqualifiedRuleScopeAttribute(): void {
        let action: string =  "$n;"; // must be qualified
    }
    @Test testRuleAndTokenLabelTypeMismatch(): void {
    }
    @Test testListAndTokenLabelTypeMismatch(): void {
    }
    @Test testListAndRuleLabelTypeMismatch(): void {
    }
    @Test testArgReturnValueMismatch(): void {
    }
    @Test testSimplePlusEqualLabel(): void {
        let action: string =  "$ids.size();"; // must be qualified
    }
    @Test testPlusEqualStringLabel(): void {
        let action: string =  "$ids.size();"; // must be qualified
    }
    @Test testPlusEqualSetLabel(): void {
        let action: string =  "$ids.size();"; // must be qualified
    }
    @Test testPlusEqualWildcardLabel(): void {
        let action: string =  "$ids.size();"; // must be qualified
    }
    @Test testImplicitTokenLabel(): void {
        let action: string =  "$ID; $ID.text; $ID.getText()";
    }

    @Test testImplicitRuleLabel(): void {
        let action: string =  "$r.start;";
    }

    @Test testReuseExistingLabelWithImplicitRuleLabel(): void {
        let action: string =  "$r.start;";
    }

    @Test testReuseExistingListLabelWithImplicitRuleLabel(): void {
        let action: string =  "$r.start;";
    }

    @Test testReuseExistingLabelWithImplicitTokenLabel(): void {
        let action: string =  "$ID.text;";
    }

    @Test testReuseExistingListLabelWithImplicitTokenLabel(): void {
        let action: string =  "$ID.text;";
    }

    @Test testRuleLabelWithoutOutputOption(): void {
    }
    @Test testMissingArgs(): void {
    }
    @Test testArgsWhenNoneDefined(): void {
    }
    @Test testReturnInitValue(): void {
    }
    @Test testMultipleReturnInitValue(): void {
    }
    @Test testCStyleReturnInitValue(): void {
    }
    @Test testArgsWithInitValues(): void {
    }
    @Test testArgsOnToken(): void {
    }
    @Test testArgsOnTokenInLexer(): void {
    }
    @Test testLabelOnRuleRefInLexer(): void {
        let action: string =  "$i.text";
    }

    @Test testRefToRuleRefInLexer(): void {
        let action: string =  "$ID.text";
    }

    @Test testRefToRuleRefInLexerNoAttribute(): void {
        let action: string =  "$ID";
    }

    @Test testCharLabelInLexer(): void {
    }
    @Test testCharListLabelInLexer(): void {
    }
    @Test testWildcardCharLabelInLexer(): void {
    }
    @Test testWildcardCharListLabelInLexer(): void {
    }
    @Test testMissingArgsInLexer(): void {
    }
    @Test testLexerRulePropertyRefs(): void {
        let action: string =  "$text $type $line $pos $channel $index $start $stop";
    }

    @Test testLexerLabelRefs(): void {
        let action: string =  "$a $b.text $c $d.text";
    }

    @Test testSettingLexerRulePropertyRefs(): void {
        let action: string =  "$text $type=1 $line=1 $pos=1 $channel=1 $index";
    }

    @Test testArgsOnTokenInLexerRuleOfCombined(): void {
    }
    @Test testMissingArgsOnTokenInLexerRuleOfCombined(): void {
    }
    @Test testTokenLabelTreeProperty(): void {
        let action: string =  "$id.tree;";
    }

    @Test testTokenRefTreeProperty(): void {
        let action: string =  "$ID.tree;";
    }

    @Test testAmbiguousTokenRef(): void {
        let action: string =  "$ID;";
    }

    @Test testAmbiguousTokenRefWithProp(): void {
        let action: string =  "$ID.text;";
    }

    @Test testRuleRefWithDynamicScope(): void {
        let action: string =  "$field::x = $field.st;";
    }

    @Test testAssignToOwnRulenameAttr(): void {
        let action: string =  "$rule.tree = null;";
    }

    @Test testAssignToOwnParamAttr(): void {
        let action: string =  "$rule.i = 42; $i = 23;";
    }

    @Test testIllegalAssignToOwnRulenameAttr(): void {
        let action: string =  "$rule.stop = 0;";
    }

    @Test testIllegalAssignToLocalAttr(): void {
        let action: string =  "$tree = null; $st = null; $start = 0; $stop = 0; $text = 0;";
    }

    @Test testIllegalAssignRuleRefAttr(): void {
        let action: string =  "$other.tree = null;";
    }

    @Test testIllegalAssignTokenRefAttr(): void {
        let action: string =  "$ID.text = \"test\";";
    }

    @Test testAssignToTreeNodeAttribute(): void {
        let action: string =  "$tree.scope = localScope;";
    }

    @Test testDoNotTranslateAttributeCompare(): void {
        let action: string =  "$a.line == $b.line";
    }

    @Test testDoNotTranslateScopeAttributeCompare(): void {
        let action: string =  "if ($rule::foo == \"foo\" || 1) { System.out.println(\"ouch\"); }";
    }

    @Test testTreeRuleStopAttributeIsInvalid(): void {
        let action: string =  "$r.x; $r.start; $r.stop";
    }

    @Test testRefToTextAttributeForCurrentTreeRule(): void {
        let action: string =  "$text";
    }

    @Test testTypeOfGuardedAttributeRefIsCorrect(): void {
        let action: string =  "int x = $b::n;";
    }

	@Test testBracketArgParsing(): void {
	}

	@Test testStringArgParsing(): void {
		let action: string =  "34, '{', \"it's<\", '\"', \"\\\"\", 19";
	}
	@Test testComplicatedSingleArgParsing(): void {
		let action: string =  "(*a).foo(21,33,\",\")";
	}
	@Test testArgWithLT(): void {
		let action: string =  "34<50";
	}
	@Test testGenericsAsArgumentDefinition(): void {
		let action: string =  "$foo.get(\"ick\");";
	}
	@Test testGenericsAsArgumentDefinition2(): void {
		let action: string =  "$foo.get(\"ick\"); x=3;";
	}
	@Test testGenericsAsReturnValue(): void {
	}

	// TODO: nonlocal $rule::x
}
