/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */
// ConvertTo-TS run at 2016-10-04T11:27:07.9792943-07:00

// import org.antlr.runtime.misc.FastQueue;
// import org.junit.Test;

// import static org.junit.Assert.assertEquals;

export class TestFastQueue {
    @Test testQueueNoRemove(): void {
        let q: FastQueue<string> =  new FastQueue<String>();
        q.add("a");
        q.add("b");
        q.add("c");
        q.add("d");
        q.add("e");
        let expecting: string =  "a b c d e";
        let found: string =  q.toString();
        assertEquals(expecting, found);
    }

    @Test testQueueThenRemoveAll(): void {
        let q: FastQueue<string> =  new FastQueue<String>();
        q.add("a");
        q.add("b");
        q.add("c");
        q.add("d");
        q.add("e");
        let buf: StringBuilder =  new StringBuilder();
        while ( q.size()>0 ) {
            let o: string =  q.remove();
            buf.append(o);
            if ( q.size()>0 ) buf.append(" ");
        }
        assertEquals("queue should be empty", 0, q.size());
        let expecting: string =  "a b c d e";
        let found: string =  buf.toString();
        assertEquals(expecting, found);
    }

    @Test testQueueThenRemoveOneByOne(): void {
        let buf: StringBuilder =  new StringBuilder();
        let q: FastQueue<string> =  new FastQueue<String>();
        q.add("a");
        buf.append(q.remove());
        q.add("b");
        buf.append(q.remove());
        q.add("c");
        buf.append(q.remove());
        q.add("d");
        buf.append(q.remove());
        q.add("e");
        buf.append(q.remove());
        assertEquals("queue should be empty", 0, q.size());
        let expecting: string =  "abcde";
        let found: string =  buf.toString();
        assertEquals(expecting, found);
    }

    // E r r o r s

    @Test testGetFromEmptyQueue(): void {
        let q: FastQueue<string> =  new FastQueue<String>();
        let msg: string =  null;
        try { q.remove(); }
        catch (NoSuchElementException nsee) {
            msg = nsee.getMessage();
        }
        let expecting: string =  "queue index 0 > last index -1";
        let found: string =  msg;
        assertEquals(expecting, found);
    }

    @Test testGetFromEmptyQueueAfterSomeAdds(): void {
        let q: FastQueue<string> =  new FastQueue<String>();
        q.add("a");
        q.add("b");
        q.remove();
        q.remove();
        let msg: string =  null;
        try { q.remove(); }
        catch (NoSuchElementException nsee) {
            msg = nsee.getMessage();
        }
        let expecting: string =  "queue index 0 > last index -1";
        let found: string =  msg;
        assertEquals(expecting, found);
    }

    @Test testGetFromEmptyQueueAfterClear(): void {
        let q: FastQueue<string> =  new FastQueue<String>();
        q.add("a");
        q.add("b");
        q.clear();
        let msg: string =  null;
        try { q.remove(); }
        catch (NoSuchElementException nsee) {
            msg = nsee.getMessage();
        }
        let expecting: string =  "queue index 0 > last index -1";
        let found: string =  msg;
        assertEquals(expecting, found);
    }
}
