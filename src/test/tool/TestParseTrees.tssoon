/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */

// ConvertTo-TS run at 2016-10-04T11:27:15.4269111-07:00

// import org.junit.Test;

// import static org.junit.Assert.*;

export class TestParseTrees extends BaseTest {
	@Test testTokenAndRuleContextString(): void {
		let grammar: string = 
			"grammar T;\n" +
			"s\n" +
			"@init {setBuildParseTree(true);}\n" +
			"@after {System.out.println($r.ctx.toStringTree(this));}\n" +
			"  :r=a ;\n" +
			"a : 'x' {System.out.println(getRuleInvocationStack());} ;\n";
		let result: string =  execParser("T.g4", grammar, "TParser", "TLexer", "s", "x", false);
		let expecting: string =  "[a, s]\n(a x)\n";
		assertEquals(expecting, result);
	}

	@Test testToken2(): void {
		let grammar: string = 
			"grammar T;\n" +
			"s\n" +
			"@init {setBuildParseTree(true);}\n" +
			"@after {System.out.println($r.ctx.toStringTree(this));}\n" +
			"  :r=a ;\n" +
			"a : 'x' 'y'\n" +
			"  ;\n";
		let result: string =  execParser("T.g4", grammar, "TParser", "TLexer", "s", "xy", false);
		let expecting: string =  "(a x y)\n";
		assertEquals(expecting, result);
	}

	@Test test2Alts(): void {
		let grammar: string = 
			"grammar T;\n" +
			"s\n" +
			"@init {setBuildParseTree(true);}\n" +
			"@after {System.out.println($r.ctx.toStringTree(this));}\n" +
			"  :r=a ;\n" +
			"a : 'x' | 'y'\n" +
			"  ;\n";
		let result: string =  execParser("T.g4", grammar, "TParser", "TLexer", "s", "y", false);
		let expecting: string =  "(a y)\n";
		assertEquals(expecting, result);
	}

	@Test test2AltLoop(): void {
		let grammar: string = 
			"grammar T;\n" +
			"s\n" +
			"@init {setBuildParseTree(true);}\n" +
			"@after {System.out.println($r.ctx.toStringTree(this));}\n" +
			"  :r=a ;\n" +
			"a : ('x' | 'y')* 'z'\n" +
			"  ;\n";
		let result: string =  execParser("T.g4", grammar, "TParser", "TLexer", "s", "xyyxyxz", false);
		let expecting: string =  "(a x y y x y x z)\n";
		assertEquals(expecting, result);
	}

	@Test testRuleRef(): void {
		let grammar: string = 
			"grammar T;\n" +
			"s\n" +
			"@init {setBuildParseTree(true);}\n" +
			"@after {System.out.println($r.ctx.toStringTree(this));}\n" +
			"  : r=a ;\n" +
			"a : b 'x'\n" +
			"  ;\n" +
			"b : 'y' ;\n";
		let result: string =  execParser("T.g4", grammar, "TParser", "TLexer", "s", "yx", false);
		let expecting: string =  "(a (b y) x)\n";
		assertEquals(expecting, result);
	}

	// ERRORS

	@Test testExtraToken(): void {
		let grammar: string = 
			"grammar T;\n" +
			"s\n" +
			"@init {setBuildParseTree(true);}\n" +
			"@after {System.out.println($r.ctx.toStringTree(this));}\n" +
			"  : r=a ;\n" +
			"a : 'x' 'y'\n" +
			"  ;\n" +
			"Z : 'z'; \n";
		let result: string =  execParser("T.g4", grammar, "TParser", "TLexer", "s", "xzy", false);
		let expecting: string =  "(a x z y)\n"; // ERRORs not shown. z is colored red in tree view
		assertEquals(expecting, result);
	}

	@Test testNoViableAlt(): void {
		let grammar: string = 
			"grammar T;\n" +
			"s\n" +
			"@init {setBuildParseTree(true);}\n" +
			"@after {System.out.println($r.ctx.toStringTree(this));}\n" +
			"  : r=a ;\n" +
			"a : 'x' | 'y'\n" +
			"  ;\n" +
			"Z : 'z'; \n";
		let result: string =  execParser("T.g4", grammar, "TParser", "TLexer", "s", "z", false);
		let expecting: string =  "(a z)\n";
		assertEquals(expecting, result);
	}

	@Test testSync(): void {
		let grammar: string = 
			"grammar T;\n" +
			"s\n" +
			"@init {setBuildParseTree(true);}\n" +
			"@after {System.out.println($r.ctx.toStringTree(this));}\n" +
			"  : r=a ;\n" +
			"a : 'x' 'y'* '!'\n" +
			"  ;\n" +
			"Z : 'z'; \n";
		let result: string =  execParser("T.g4", grammar, "TParser", "TLexer", "s", "xzyy!", false);
		let expecting: string =  "(a x z y y !)\n";
		assertEquals(expecting, result);
	}
}
