/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */
// ConvertTo-TS run at 2016-10-04T11:27:35.9190503-07:00

// import org.junit.Test;

// import static org.junit.Assert.*;

/** Test the set stuff in lexer and parser */
export class TestSets extends BaseTest {
	protected debug: boolean =  false;

	/** Public default constructor used by TestRig */
	 constructor()  {
	}

	@Test testSeqDoesNotBecomeSet(): void {
		// this must return A not I to the parser; calling a nonfragment rule
		// from a nonfragment rule does not set the overall token.
		let grammar: string = 
			"grammar P;\n" +
			"a : C {System.out.println(_input.getText());} ;\n" +
			"fragment A : '1' | '2';\n" +
			"fragment B : '3' '4';\n" +
			"C : A | B;\n";
		let found: string =  execParser("P.g4", grammar, "PParser", "PLexer",
								  "a", "34", debug);
		assertEquals("34\n", found);
	}

	@Test testParserSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : t=('x'|'y') {System.out.println($t.text);} ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "x", debug);
		assertEquals("x\n", found);
	}

	@Test testParserNotSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : t=~('x'|'y') 'z' {System.out.println($t.text);} ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "zz", debug);
		assertEquals("z\n", found);
	}

	@Test testParserNotToken(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : ~'x' 'z' {System.out.println(_input.getText());} ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "zz", debug);
		assertEquals("zz\n", found);
	}

	@Test testParserNotTokenWithLabel(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : t=~'x' 'z' {System.out.println($t.text);} ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "zz", debug);
		assertEquals("z\n", found);
	}

	@Test testRuleAsSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a @after {System.out.println(_input.getText());} : 'a' | 'b' |'c' ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "b", debug);
		assertEquals("b\n", found);
	}

	@Test testNotChar(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A {System.out.println($A.text);} ;\n" +
			"A : ~'b' ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "x", debug);
		assertEquals("x\n", found);
	}

	@Test testOptionalSingleElement(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A? 'c' {System.out.println(_input.getText());} ;\n" +
			"A : 'b' ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "bc", debug);
		assertEquals("bc\n", found);
	}

	@Test testOptionalLexerSingleElement(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A {System.out.println(_input.getText());} ;\n" +
			"A : 'b'? 'c' ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "bc", debug);
		assertEquals("bc\n", found);
	}

	@Test testStarLexerSingleElement(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A {System.out.println(_input.getText());} ;\n" +
			"A : 'b'* 'c' ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "bbbbc", debug);
		assertEquals("bbbbc\n", found);
		found = execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "c", debug);
		assertEquals("c\n", found);
	}

	@Test testPlusLexerSingleElement(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A {System.out.println(_input.getText());} ;\n" +
			"A : 'b'+ 'c' ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "bbbbc", debug);
		assertEquals("bbbbc\n", found);
	}

	@Test testOptionalSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : ('a'|'b')? 'c' {System.out.println(_input.getText());} ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "ac", debug);
		assertEquals("ac\n", found);
	}

	@Test testStarSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : ('a'|'b')* 'c' {System.out.println(_input.getText());} ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "abaac", debug);
		assertEquals("abaac\n", found);
	}

	@Test testPlusSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : ('a'|'b')+ 'c' {System.out.println(_input.getText());} ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "abaac", debug);
		assertEquals("abaac\n", found);
	}

	@Test testLexerOptionalSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A {System.out.println(_input.getText());} ;\n" +
			"A : ('a'|'b')? 'c' ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "ac", debug);
		assertEquals("ac\n", found);
	}

	@Test testLexerStarSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A {System.out.println(_input.getText());} ;\n" +
			"A : ('a'|'b')* 'c' ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "abaac", debug);
		assertEquals("abaac\n", found);
	}

	@Test testLexerPlusSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A {System.out.println(_input.getText());} ;\n" +
			"A : ('a'|'b')+ 'c' ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "abaac", debug);
		assertEquals("abaac\n", found);
	}

	@Test testNotCharSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A {System.out.println($A.text);} ;\n" +
			"A : ~('b'|'c') ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "x", debug);
		assertEquals("x\n", found);
	}

	@Test testNotCharSetWithLabel(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A {System.out.println($A.text);} ;\n" +
			"A : h=~('b'|'c') ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "x", debug);
		assertEquals("x\n", found);
	}

	@Test testNotCharSetWithRuleRef(): void {
		// might be a useful feature to add someday
		let pair: string[] =  new String[] {
			"grammar T;\n" +
			"a : A {System.out.println($A.text);} ;\n" +
			"A : ~('a'|B) ;\n" +
			"B : 'b' ;\n",
			"error(" + ErrorType.UNSUPPORTED_REFERENCE_IN_LEXER_SET.code + "): T.g4:3:10: rule reference 'B' is not currently supported in a set\n"
		};
		super.testErrors(pair, true);
	}

	@Test testNotCharSetWithString(): void {
		// might be a useful feature to add someday
		let pair: string[] =  new String[] {
			"grammar T;\n" +
			"a : A {System.out.println($A.text);} ;\n" +
			"A : ~('a'|'aa') ;\n" +
			"B : 'b' ;\n",
			"error(" + ErrorType.INVALID_LITERAL_IN_LEXER_SET.code + "): T.g4:3:10: multi-character literals are not allowed in lexer sets: 'aa'\n"
		};
		super.testErrors(pair, true);
	}

	@Test testNotCharSetWithRuleRef3(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : A {System.out.println($A.text);} ;\n" +
			"A : ('a'|B) ;\n" +  // this doesn't collapse to set but works
			"fragment\n" +
			"B : ~('a'|'c') ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "x", debug);
		assertEquals("x\n", found);
	}

	@Test testCharSetLiteral(): void {
		let grammar: string = 
			"grammar T;\n" +
			"a : (A {System.out.println($A.text);})+ ;\n" +
			"A : [AaBb] ;\n" +
			"WS : (' '|'\\n')+ -> skip ;\n";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer",
								  "a", "A a B b", debug);
		assertEquals("A\n" +
					 "a\n" +
					 "B\n" +
					 "b\n", found);
	}

	@Test
	testComplementSet(): void {
		let grammar: string = 
			"grammar T;\n" +
			"parse : ~NEW_LINE;\n" +
			"NEW_LINE: '\\r'? '\\n';";
		let found: string =  execParser("T.g4", grammar, "TParser", "TLexer", "parse", "a", false);
		assertEquals("", found);
		assertEquals("line 1:0 token recognition error at: 'a'\nline 1:1 missing {} at '<EOF>'\n", this.stderrDuringParse);
	}
}
