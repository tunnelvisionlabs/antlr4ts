/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */
// ConvertTo-TS run at 2016-10-04T11:27:37.8040401-07:00

// import org.junit.Test;

// import static org.junit.Assert.*;

/** Test topo sort in GraphNode. */
export class TestTopologicalSort extends BaseTest {
    @Test
    testFairlyLargeGraph(): void {
        let g: Graph<string> =  new Graph<String>();
        g.addEdge("C", "F");
        g.addEdge("C", "G");
        g.addEdge("C", "A");
        g.addEdge("C", "B");
        g.addEdge("A", "D");
        g.addEdge("A", "E");
        g.addEdge("B", "E");
        g.addEdge("D", "E");
        g.addEdge("D", "F");
        g.addEdge("F", "H");
        g.addEdge("E", "F");

        let expecting: string =  "[H, F, G, E, D, A, B, C]";
        let nodes: List<string> =  g.sort();
        let result: string =  nodes.toString();
        assertEquals(expecting, result);
    }

    @Test
    testCyclicGraph(): void {
        let g: Graph<string> =  new Graph<String>();
        g.addEdge("A", "B");
        g.addEdge("B", "C");
        g.addEdge("C", "A");
        g.addEdge("C", "D");

        let expecting: string =  "[D, C, B, A]";
        let nodes: List<string> =  g.sort();
        let result: string =  nodes.toString();
        assertEquals(expecting, result);
    }

    @Test
    testRepeatedEdges(): void {
        let g: Graph<string> =  new Graph<String>();
        g.addEdge("A", "B");
        g.addEdge("B", "C");
        g.addEdge("A", "B"); // dup
        g.addEdge("C", "D");

        let expecting: string =  "[D, C, B, A]";
        let nodes: List<string> =  g.sort();
        let result: string =  nodes.toString();
        assertEquals(expecting, result);
    }

    @Test
    testSimpleTokenDependence(): void {
        let g: Graph<string> =  new Graph<String>();
        g.addEdge("Java.g4", "MyJava.tokens"); // Java feeds off manual token file
        g.addEdge("Java.tokens", "Java.g4");
        g.addEdge("Def.g4", "Java.tokens");    // walkers feed off generated tokens
        g.addEdge("Ref.g4", "Java.tokens");

        let expecting: string =  "[MyJava.tokens, Java.g4, Java.tokens, Def.g4, Ref.g4]";
        let nodes: List<string> =  g.sort();
        let result: string =  nodes.toString();
        assertEquals(expecting, result);
    }

    @Test
    testParserLexerCombo(): void {
        let g: Graph<string> =  new Graph<String>();
        g.addEdge("JavaLexer.tokens", "JavaLexer.g4");
        g.addEdge("JavaParser.g4", "JavaLexer.tokens");
        g.addEdge("Def.g4", "JavaLexer.tokens");
        g.addEdge("Ref.g4", "JavaLexer.tokens");

        let expecting: string =  "[JavaLexer.g4, JavaLexer.tokens, JavaParser.g4, Def.g4, Ref.g4]";
        let nodes: List<string> =  g.sort();
        let result: string =  nodes.toString();
        assertEquals(expecting, result);
    }
}
