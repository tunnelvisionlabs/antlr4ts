/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */

// ConvertTo-TS run at 2016-10-04T11:27:05.0891872-07:00

// import org.junit.Test;

// import static org.junit.Assert.assertEquals;
// import static org.junit.Assert.assertTrue;

	// NOTICE: TOKENS IN LEXER, PARSER MUST BE SAME OR TOKEN TYPE MISMATCH
	// NOTICE: TOKENS IN LEXER, PARSER MUST BE SAME OR TOKEN TYPE MISMATCH
	// NOTICE: TOKENS IN LEXER, PARSER MUST BE SAME OR TOKEN TYPE MISMATCH

export class TestATNParserPrediction extends BaseTest {
	@Test testAorB(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"a : A{;} | B ;");
		let decision: number =  0;
		checkPredictedAlt(lg, g, decision, "a", 1);
		checkPredictedAlt(lg, g, decision, "b", 2);

		// After matching these inputs for decision, what is DFA after each prediction?
		let inputs: string[] =  {
			"a",
			"b",
			"a"
		};
		let dfa: string[] =  {
			"s0-'a'->:s1=>1\n",

			"s0-'a'->:s1=>1\n" +
			"s0-'b'->:s2=>2\n",

			"s0-'a'->:s1=>1\n" + // don't change after it works
			"s0-'b'->:s2=>2\n",
		};
		checkDFAConstruction(lg, g, decision, inputs, dfa);
	}

	@Test testEmptyInput(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"a : A | ;");
		let decision: number =  0;
		checkPredictedAlt(lg, g, decision, "a", 1);
		checkPredictedAlt(lg, g, decision, "", 2);

		// After matching these inputs for decision, what is DFA after each prediction?
		let inputs: string[] =  {
			"a",
			"",
		};
		let dfa: string[] =  {
			"s0-'a'->:s1=>1\n",

			"s0-EOF->:s2=>2\n" +
			"s0-'a'->:s1=>1\n",
		};
		checkDFAConstruction(lg, g, decision, inputs, dfa);
	}

	@Test testPEGAchillesHeel(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"a : A | A B ;");
		checkPredictedAlt(lg, g, 0, "a", 1);
		checkPredictedAlt(lg, g, 0, "ab", 2);
		checkPredictedAlt(lg, g, 0, "abc", 2);

		let inputs: string[] =  {
			"a",
			"ab",
			"abc"
		};
		let dfa: string[] =  {
			"s0-'a'->s1\n" +
			"s1-EOF->:s2=>1\n",

			"s0-'a'->s1\n" +
			"s1-EOF->:s2=>1\n" +
			"s1-'b'->:s3=>2\n",

			"s0-'a'->s1\n" +
			"s1-EOF->:s2=>1\n" +
			"s1-'b'->:s3=>2\n"
		};
		checkDFAConstruction(lg, g, 0, inputs, dfa);
	}

	@Test testRuleRefxory(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"a : x | y ;\n" +
			"x : A ;\n" +
			"y : B ;\n");
		let decision: number =  0;
		checkPredictedAlt(lg, g, decision, "a", 1);
		checkPredictedAlt(lg, g, decision, "b", 2);

		// After matching these inputs for decision, what is DFA after each prediction?
		let inputs: string[] =  {
			"a",
			"b",
			"a"
		};
		let dfa: string[] =  {
			"s0-'a'->:s1=>1\n",

			"s0-'a'->:s1=>1\n" +
			"s0-'b'->:s2=>2\n",

			"s0-'a'->:s1=>1\n" + // don't change after it works
			"s0-'b'->:s2=>2\n",
		};
		checkDFAConstruction(lg, g, decision, inputs, dfa);
	}

	@Test testOptionalRuleChasesGlobalFollow(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"tokens {A,B,C}\n" +
			"a : x B ;\n" +
			"b : x C ;\n" +
			"x : A | ;\n");
		let decision: number =  0;
		checkPredictedAlt(lg, g, decision, "a", 1);
		checkPredictedAlt(lg, g, decision, "b", 2);
		checkPredictedAlt(lg, g, decision, "c", 2);

		// After matching these inputs for decision, what is DFA after each prediction?
		let inputs: string[] =  {
			"a",
			"b",
			"c",
			"c",
		};
		let dfa: string[] =  {
			"s0-'a'->:s1=>1\n",

			"s0-'a'->:s1=>1\n" +
			"s0-'b'->:s2=>2\n",

			"s0-'a'->:s1=>1\n" +
			"s0-'b'->:s2=>2\n" +
			"s0-'c'->:s3=>2\n",

			"s0-'a'->:s1=>1\n" +
			"s0-'b'->:s2=>2\n" +
			"s0-'c'->:s3=>2\n",
		};
		checkDFAConstruction(lg, g, decision, inputs, dfa);
	}

	@Test testLL1Ambig(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"a : A | A | A B ;");
		let decision: number =  0;
		checkPredictedAlt(lg, g, decision, "a", 1);
		checkPredictedAlt(lg, g, decision, "ab", 3);

		// After matching these inputs for decision, what is DFA after each prediction?
		let inputs: string[] =  {
			"a",
			"ab",
			"ab"
		};
		let dfa: string[] =  {
			"s0-'a'->s1\n" +
			"s1-EOF->:s2=>1\n",

			"s0-'a'->s1\n" +
			"s1-EOF->:s2=>1\n" +
			"s1-'b'->:s3=>3\n",

			"s0-'a'->s1\n" +
			"s1-EOF->:s2=>1\n" +
			"s1-'b'->:s3=>3\n",
		};
		checkDFAConstruction(lg, g, decision, inputs, dfa);
	}

	@Test testLL2Ambig(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n");
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"a : A B | A B | A B C ;");
		let decision: number =  0;
		checkPredictedAlt(lg, g, decision, "ab", 1);
		checkPredictedAlt(lg, g, decision, "abc", 3);

		// After matching these inputs for decision, what is DFA after each prediction?
		let inputs: string[] =  {
			"ab",
			"abc",
			"ab"
		};
		let dfa: string[] =  {
			"s0-'a'->s1\n" +
			"s1-'b'->s2\n" +
			"s2-EOF->:s3=>1\n",

			"s0-'a'->s1\n" +
			"s1-'b'->s2\n" +
			"s2-EOF->:s3=>1\n" +
			"s2-'c'->:s4=>3\n",

			"s0-'a'->s1\n" +
			"s1-'b'->s2\n" +
			"s2-EOF->:s3=>1\n" +
			"s2-'c'->:s4=>3\n",
		};
		checkDFAConstruction(lg, g, decision, inputs, dfa);
	}

	@Test testRecursiveLeftPrefix(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n" +
			"LP : '(' ;\n" +
			"RP : ')' ;\n" +
			"INT : '0'..'9'+ ;\n"
		);
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"tokens {A,B,C,LP,RP,INT}\n" +
			"a : e B | e C ;\n" +
			"e : LP e RP\n" +
			"  | INT\n" +
			"  ;");
		let decision: number =  0;
		checkPredictedAlt(lg, g, decision, "34b", 1);
		checkPredictedAlt(lg, g, decision, "34c", 2);
		checkPredictedAlt(lg, g, decision, "((34))b", 1);
		checkPredictedAlt(lg, g, decision, "((34))c", 2);

		// After matching these inputs for decision, what is DFA after each prediction?
		let inputs: string[] =  {
			"34b",
			"34c",
			"((34))b",
			"((34))c"
		};
		let dfa: string[] =  {
			"s0-INT->s1\n" +
			"s1-'b'->:s2=>1\n",

			"s0-INT->s1\n" +
			"s1-'b'->:s2=>1\n" +
			"s1-'c'->:s3=>2\n",

			"s0-'('->s4\n" +
			"s0-INT->s1\n" +
			"s1-'b'->:s2=>1\n" +
			"s1-'c'->:s3=>2\n" +
			"s4-'('->s5\n" +
			"s5-INT->s6\n" +
			"s6-')'->s7\n" +
			"s7-')'->s1\n",

			"s0-'('->s4\n" +
			"s0-INT->s1\n" +
			"s1-'b'->:s2=>1\n" +
			"s1-'c'->:s3=>2\n" +
			"s4-'('->s5\n" +
			"s5-INT->s6\n" +
			"s6-')'->s7\n" +
			"s7-')'->s1\n",
		};
		checkDFAConstruction(lg, g, decision, inputs, dfa);
	}

	@Test testRecursiveLeftPrefixWithAorABIssue(): void {
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"A : 'a' ;\n" +
			"B : 'b' ;\n" +
			"C : 'c' ;\n" +
			"LP : '(' ;\n" +
			"RP : ')' ;\n" +
			"INT : '0'..'9'+ ;\n"
		);
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"tokens {A,B,C,LP,RP,INT}\n" +
			"a : e A | e A B ;\n" +
			"e : LP e RP\n" +
			"  | INT\n" +
			"  ;");
		let decision: number =  0;
		checkPredictedAlt(lg, g, decision, "34a", 1);
		checkPredictedAlt(lg, g, decision, "34ab", 2); // PEG would miss this one!
		checkPredictedAlt(lg, g, decision, "((34))a", 1);
		checkPredictedAlt(lg, g, decision, "((34))ab", 2);

		// After matching these inputs for decision, what is DFA after each prediction?
		let inputs: string[] =  {
			"34a",
			"34ab",
			"((34))a",
			"((34))ab",
		};
		let dfa: string[] =  {
			"s0-INT->s1\n" +
			"s1-'a'->s2\n" +
			"s2-EOF->:s3=>1\n",

			"s0-INT->s1\n" +
			"s1-'a'->s2\n" +
			"s2-EOF->:s3=>1\n" +
			"s2-'b'->:s4=>2\n",

			"s0-'('->s5\n" +
			"s0-INT->s1\n" +
			"s1-'a'->s2\n" +
			"s2-EOF->:s3=>1\n" +
			"s2-'b'->:s4=>2\n" +
			"s5-'('->s6\n" +
			"s6-INT->s7\n" +
			"s7-')'->s8\n" +
			"s8-')'->s1\n",

			"s0-'('->s5\n" +
			"s0-INT->s1\n" +
			"s1-'a'->s2\n" +
			"s2-EOF->:s3=>1\n" +
			"s2-'b'->:s4=>2\n" +
			"s5-'('->s6\n" +
			"s6-INT->s7\n" +
			"s7-')'->s8\n" +
			"s8-')'->s1\n",
		};
		checkDFAConstruction(lg, g, decision, inputs, dfa);
	}

	@Test testContinuePrediction(): void {
		// Sam found prev def of ambiguity was too restrictive.
		// E.g., (13, 1, []), (13, 2, []), (12, 2, []) should not
		// be declared ambig since (12, 2, []) can take us to
		// unambig state maybe. keep going.
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"ID : 'a'..'z' ;\n" + // one char
			"SEMI : ';' ;\n"+
			"INT : '0'..'9'+ ;\n"
		);
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"tokens {ID,SEMI,INT}\n" +
			"a : (ID | ID ID?) SEMI ;");
		let decision: number =  1;
		checkPredictedAlt(lg, g, decision, "a;", 1);
		checkPredictedAlt(lg, g, decision, "ab;", 2);
	}

	@Test testContinuePrediction2(): void {
		// ID is ambig for first two alts, but ID SEMI lets us move forward with alt 3
		let lg: LexerGrammar =  new LexerGrammar(
			"lexer grammar L;\n" +
			"ID : 'a'..'z' ;\n" + // one char
			"SEMI : ';' ;\n"+
			"INT : '0'..'9'+ ;\n"
		);
		let g: Grammar =  new Grammar(
			"parser grammar T;\n"+
			"tokens {ID,SEMI,INT}\n" +
			"a : ID | ID | ID SEMI ;\n");
		let decision: number =  0;
		checkPredictedAlt(lg, g, decision, "a", 1);
		checkPredictedAlt(lg, g, decision, "a;", 3);
	}

	@Test testAltsForLRRuleComputation(): void {
		let g: Grammar =  new Grammar(
		"grammar T;\n" +
		"e : e '*' e\n" +
		"  | INT\n" +
		"  | e '+' e\n" +
		"  | ID\n" +
		"  ;\n" +
		"ID : [a-z]+ ;\n" +
		"INT : [0-9]+ ;\n" +
		"WS : [ \\r\\t\\n]+ ;");
		let e: Rule =  g.getRule("e");
		assertTrue(e instanceof LeftRecursiveRule);
		let lr: LeftRecursiveRule =  (LeftRecursiveRule)e;
		assertEquals("[0, 2, 4]", Arrays.toString(lr.getPrimaryAlts()));
		assertEquals("[0, 1, 3]", Arrays.toString(lr.getRecursiveOpAlts()));
	}

	@Test testAltsForLRRuleComputation2(): void {
		let g: Grammar =  new Grammar(
		"grammar T;\n" +
		"e : INT\n" +
		"  | e '*' e\n" +
		"  | ID\n" +
		"  ;\n" +
		"ID : [a-z]+ ;\n" +
		"INT : [0-9]+ ;\n" +
		"WS : [ \\r\\t\\n]+ ;");
		let e: Rule =  g.getRule("e");
		assertTrue(e instanceof LeftRecursiveRule);
		let lr: LeftRecursiveRule =  (LeftRecursiveRule)e;
		assertEquals("[0, 1, 3]", Arrays.toString(lr.getPrimaryAlts()));
		assertEquals("[0, 2]", Arrays.toString(lr.getRecursiveOpAlts()));
	}

	@Test testAltsForLRRuleComputation3(): void {
		let g: Grammar =  new Grammar(
		"grammar T;\n" +
		"random : 'blort';\n" + // should have no effect
		"e : '--' e\n" +
		"  | e '*' e\n" +
		"  | e '+' e\n" +
		"  | e '--'\n" +
		"  | ID\n" +
		"  ;\n" +
		"ID : [a-z]+ ;\n" +
		"INT : [0-9]+ ;\n" +
		"WS : [ \\r\\t\\n]+ ;");
		let e: Rule =  g.getRule("e");
		assertTrue(e instanceof LeftRecursiveRule);
		let lr: LeftRecursiveRule =  (LeftRecursiveRule)e;
		assertEquals("[0, 1, 5]", Arrays.toString(lr.getPrimaryAlts()));
		assertEquals("[0, 2, 3, 4]", Arrays.toString(lr.getRecursiveOpAlts()));
	}

	/** first check that the ATN predicts right alt.
	 *  Then check adaptive prediction.
	 */
	checkPredictedAlt(lg: LexerGrammar, g: Grammar, decision: number, 
								  inputString: string, expectedAlt: number): void
	{
		Tool.internalOption_ShowATNConfigsInDFA = true;
		let lexatn: ATN =  createATN(lg, true);
		let lexInterp: LexerATNSimulator =  new LexerATNSimulator(lexatn);
		let types: IntegerList =  getTokenTypesViaATN(inputString, lexInterp);
		console.log(types);

		semanticProcess(lg);
		g.importVocab(lg);
		semanticProcess(g);

		let f: ParserATNFactory =  new ParserATNFactory(g);
		let atn: ATN =  f.createATN();

		let dot: DOTGenerator =  new DOTGenerator(g);

		let r: Rule =  g.getRule("a");
		if ( r!=null) System.out.println(dot.getDOT(atn.ruleToStartState[r.index]));
		r = g.getRule("b");
		if ( r!=null) System.out.println(dot.getDOT(atn.ruleToStartState[r.index]));
		r = g.getRule("e");
		if ( r!=null) System.out.println(dot.getDOT(atn.ruleToStartState[r.index]));
		r = g.getRule("ifstat");
		if ( r!=null) System.out.println(dot.getDOT(atn.ruleToStartState[r.index]));
		r = g.getRule("block");
		if ( r!=null) System.out.println(dot.getDOT(atn.ruleToStartState[r.index]));

		// Check ATN prediction
//		ParserATNSimulator<Token> interp = new ParserATNSimulator<Token>(atn);
		let input: TokenStream =  new IntTokenStream(types);
		let interp: ParserInterpreterForTesting =  new ParserInterpreterForTesting(g, input);
		let startState: DecisionState =  atn.decisionToState.get(decision);
		let dfa: DFA =  new DFA(startState, decision);
		let alt: number =  interp.adaptivePredict(input, decision, ParserRuleContext.emptyContext());

		console.log(dot.getDOT(dfa, false));

		assertEquals(expectedAlt, alt);

		// Check adaptive prediction
		input.seek(0);
		alt = interp.adaptivePredict(input, decision, null);
		assertEquals(expectedAlt, alt);
		// run 2x; first time creates DFA in atn
		input.seek(0);
		alt = interp.adaptivePredict(input, decision, null);
		assertEquals(expectedAlt, alt);
	}

	checkDFAConstruction(lg: LexerGrammar, g: Grammar, decision: number, 
									 inputString: string[], dfaString: string[]): void
	{
//		Tool.internalOption_ShowATNConfigsInDFA = true;
		let lexatn: ATN =  createATN(lg, true);
		let lexInterp: LexerATNSimulator =  new LexerATNSimulator(lexatn);

		semanticProcess(lg);
		g.importVocab(lg);
		semanticProcess(g);

		let interp: ParserInterpreterForTesting =  new ParserInterpreterForTesting(g, null);
		for (let i=0; i<inputString.length; i++) {
			// Check DFA
			let types: IntegerList =  getTokenTypesViaATN(inputString[i], lexInterp);
			console.log(types);
			let input: TokenStream =  new IntTokenStream(types);
			try {
				interp.adaptivePredict(input, decision, ParserRuleContext.emptyContext());
			}
			catch (NoViableAltException nvae) {
				nvae.printStackTrace(System.err);
			}
			let dfa: DFA =  interp.getATNSimulator().atn.decisionToDFA[decision];
			assertEquals(dfaString[i], dfa.toString(g.getVocabulary(), g.rules.keySet().toArray(new String[g.rules.size()])));
		}
	}
}
