/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */
// ConvertTo-TS run at 2016-10-04T11:27:01.7710623-07:00

// import org.stringtemplate.v4.ST;

export class ErrorQueue implements ANTLRToolListener {
	tool: Tool; 
	infos: List<string> =  new ArrayList<String>();
	errors: List<ANTLRMessage> =  new ArrayList<ANTLRMessage>();
	warnings: List<ANTLRMessage> =  new ArrayList<ANTLRMessage>();
	all: List<ANTLRMessage> =  new ArrayList<ANTLRMessage>();

	 constructor()  {
		this(null);
	}

	 constructor1(tool: Tool)  {
		this.tool = tool;
	}

	@Override
	info(msg: string): void {
		infos.add(msg);
	}

	@Override
	error(msg: ANTLRMessage): void {
		errors.add(msg);
        all.add(msg);
	}

	@Override
	warning(msg: ANTLRMessage): void {
		warnings.add(msg);
        all.add(msg);
	}

	error(msg: ToolMessage): void {
		errors.add(msg);
		all.add(msg);
	}

	size(): number {
		return all.size() + infos.size();
	}

	@Override
	toString(): string {
		return toString(false);
	}

	toString(rendered: boolean): string {
		if (!rendered) {
			return Utils.join(all.iterator(), "\n");
		}

		if (tool == null) {
			throw new IllegalStateException(String.format("No %s instance is available.", Tool.class.getName()));
		}

		let buf: StringBuilder =  new StringBuilder();
		for (let m of all) {
			let st: ST =  tool.errMgr.getMessageTemplate(m);
			buf.append(st.render());
			buf.append("\n");
		}

		return buf.toString();
	}

}

