/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */

// ConvertTo-TS run at 2016-10-04T11:27:03.8903803-07:00

// import org.antlr.runtime.ANTLRStringStream;
// import org.antlr.runtime.CharStream;
// import org.antlr.runtime.CommonTokenStream;
// import org.antlr.runtime.Lexer;
// import org.antlr.runtime.Parser;
// import org.antlr.runtime.RuleReturnScope;
// import org.antlr.runtime.TokenSource;
// import org.antlr.runtime.TokenStream;
// import org.antlr.runtime.tree.Tree;
// import org.antlr.runtime.tree.TreeAdaptor;
// import org.junit.Test;

// import static org.junit.Assert.assertEquals;

//  NO LONGER using gunit!!!

export class TestASTStructure {
	let lexerClassName: string =  "org.antlr.v4.parse.ANTLRLexer";
	let parserClassName: string =  "org.antlr.v4.parse.ANTLRParser";
	let adaptorClassName: string =  "org.antlr.v4.parse.GrammarASTAdaptor";

	execParser(
	ruleName: string,
	input: string,
	scriptLine: number): any

	{
		let is: ANTLRStringStream =  new ANTLRStringStream(input);
		let lexerClass: Class<? extends TokenSource> =  Class.forName(lexerClassName).asSubclass(TokenSource.class);
		let lexConstructor: Constructor<? extends TokenSource> =  lexerClass.getConstructor(CharStream.class);
		let lexer: TokenSource =  lexConstructor.newInstance(is);
		is.setLine(scriptLine);

		let tokens: CommonTokenStream =  new CommonTokenStream(lexer);

		let parserClass: Class<? extends Parser> =  Class.forName(parserClassName).asSubclass(Parser.class);
		let parConstructor: Constructor<? extends Parser> =  parserClass.getConstructor(TokenStream.class);
		let parser: Parser =  parConstructor.newInstance(tokens);

		// set up customized tree adaptor if necessary
		if ( adaptorClassName!=null ) {
			let m: Method =  parserClass.getMethod("setTreeAdaptor", TreeAdaptor.class);
			let adaptorClass: Class<? extends TreeAdaptor> =  Class.forName(adaptorClassName).asSubclass(TreeAdaptor.class);
			m.invoke(parser, adaptorClass.newInstance());
		}

		let ruleMethod: Method =  parserClass.getMethod(ruleName);

		// INVOKE RULE
		return ruleMethod.invoke(parser);
	}

	@Test test_grammarSpec1(): void {
		// gunit test on line 15
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("grammarSpec", "parser grammar P; a : A;", 15);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(PARSER_GRAMMAR P (RULES (RULE a (BLOCK (ALT A)))))";
		assertEquals("testing rule grammarSpec", expecting, actual);
	}

	@Test test_grammarSpec2(): void {
		// gunit test on line 18
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("grammarSpec", "\n    parser grammar P;\n    tokens { A, B }\n    @header {foo}\n    a : A;\n    ", 18);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(PARSER_GRAMMAR P (tokens { A B) (@ header {foo}) (RULES (RULE a (BLOCK (ALT A)))))";
		assertEquals("testing rule grammarSpec", expecting, actual);
	}

	@Test test_grammarSpec3(): void {
		// gunit test on line 30
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("grammarSpec", "\n    parser grammar P;\n    @header {foo}\n    tokens { A,B }\n    a : A;\n    ", 30);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(PARSER_GRAMMAR P (@ header {foo}) (tokens { A B) (RULES (RULE a (BLOCK (ALT A)))))";
		assertEquals("testing rule grammarSpec", expecting, actual);
	}

	@Test test_grammarSpec4(): void {
		// gunit test on line 42
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("grammarSpec", "\n    parser grammar P;\n    import A=B, C;\n    a : A;\n    ", 42);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(PARSER_GRAMMAR P (import (= A B) C) (RULES (RULE a (BLOCK (ALT A)))))";
		assertEquals("testing rule grammarSpec", expecting, actual);
	} @Test public void test_delegateGrammars1() {
		// gunit test on line 53
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("delegateGrammars", "import A;", 53);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(import A)";
		assertEquals("testing rule delegateGrammars", expecting, actual);
	} @Test public void test_rule1() {
		// gunit test on line 56
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("rule", "a : A<X,Y=a.b.c>;", 56);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(RULE a (BLOCK (ALT (A (ELEMENT_OPTIONS X (= Y a.b.c))))))";
		assertEquals("testing rule rule", expecting, actual);
	}

	@Test test_rule2(): void {
		// gunit test on line 58
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("rule", "A : B+;", 58);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(RULE A (BLOCK (ALT (+ (BLOCK (ALT B))))))";
		assertEquals("testing rule rule", expecting, actual);
	}

	@Test test_rule3(): void {
		// gunit test on line 60
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("rule", "\n    a[int i] returns [int y]\n    @init {blort}\n      : ID ;\n    ", 60);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(RULE a int i (returns int y) (@ init {blort}) (BLOCK (ALT ID)))";
		assertEquals("testing rule rule", expecting, actual);
	}

	@Test test_rule4(): void {
		// gunit test on line 75
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("rule", "\n    a[int i] returns [int y]\n    @init {blort}\n    options {backtrack=true;}\n      : ID;\n    ", 75);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(RULE a int i (returns int y) (@ init {blort}) (OPTIONS (= backtrack true)) (BLOCK (ALT ID)))";
		assertEquals("testing rule rule", expecting, actual);
	}

	@Test test_rule5(): void {
		// gunit test on line 88
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("rule", "\n    a : ID ;\n      catch[A b] {foo}\n      finally {bar}\n    ", 88);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(RULE a (BLOCK (ALT ID)) (catch A b {foo}) (finally {bar}))";
		assertEquals("testing rule rule", expecting, actual);
	}

	@Test test_rule6(): void {
		// gunit test on line 97
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("rule", "\n    a : ID ;\n      catch[A a] {foo}\n      catch[B b] {fu}\n      finally {bar}\n    ", 97);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(RULE a (BLOCK (ALT ID)) (catch A a {foo}) (catch B b {fu}) (finally {bar}))";
		assertEquals("testing rule rule", expecting, actual);
	}

	@Test test_rule7(): void {
		// gunit test on line 107
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("rule", "\n\ta[int i]\n\tlocals [int a, float b]\n\t\t:\tA\n\t\t;\n\t", 107);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(RULE a int i (locals int a, float b) (BLOCK (ALT A)))";
		assertEquals("testing rule rule", expecting, actual);
	}

	@Test test_rule8(): void {
		// gunit test on line 115
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("rule", "\n\ta[int i].b.c\n\t\t:\tA\n\t\t;\n\t", 115);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(RULE a int i (.b.c) (BLOCK (ALT A)))";
		assertEquals("testing rule rule", expecting, actual);
	} @Test public void test_ebnf1() {
		// gunit test on line 123
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("ebnf", "(A|B)", 123);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(BLOCK (ALT A) (ALT B))";
		assertEquals("testing rule ebnf", expecting, actual);
	}

	@Test test_ebnf2(): void {
		// gunit test on line 124
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("ebnf", "(A|B)?", 124);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(? (BLOCK (ALT A) (ALT B)))";
		assertEquals("testing rule ebnf", expecting, actual);
	}

	@Test test_ebnf3(): void {
		// gunit test on line 125
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("ebnf", "(A|B)*", 125);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(* (BLOCK (ALT A) (ALT B)))";
		assertEquals("testing rule ebnf", expecting, actual);
	}

	@Test test_ebnf4(): void {
		// gunit test on line 126
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("ebnf", "(A|B)+", 126);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(+ (BLOCK (ALT A) (ALT B)))";
		assertEquals("testing rule ebnf", expecting, actual);
	} @Test public void test_element1() {
		// gunit test on line 129
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "~A", 129);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(~ (SET A))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element2(): void {
		// gunit test on line 130
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "b+", 130);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(+ (BLOCK (ALT b)))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element3(): void {
		// gunit test on line 131
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "(b)+", 131);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(+ (BLOCK (ALT b)))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element4(): void {
		// gunit test on line 132
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "b?", 132);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(? (BLOCK (ALT b)))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element5(): void {
		// gunit test on line 133
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "(b)?", 133);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(? (BLOCK (ALT b)))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element6(): void {
		// gunit test on line 134
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "(b)*", 134);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(* (BLOCK (ALT b)))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element7(): void {
		// gunit test on line 135
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "b*", 135);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(* (BLOCK (ALT b)))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element8(): void {
		// gunit test on line 136
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "'while'*", 136);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(* (BLOCK (ALT 'while')))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element9(): void {
		// gunit test on line 137
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "'a'+", 137);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(+ (BLOCK (ALT 'a')))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element10(): void {
		// gunit test on line 138
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "a[3]", 138);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(a 3)";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element11(): void {
		// gunit test on line 139
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "'a'..'z'+", 139);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(+ (BLOCK (ALT (.. 'a' 'z'))))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element12(): void {
		// gunit test on line 140
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x=ID", 140);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(= x ID)";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element13(): void {
		// gunit test on line 141
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x=ID?", 141);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(? (BLOCK (ALT (= x ID))))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element14(): void {
		// gunit test on line 142
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x=ID*", 142);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(* (BLOCK (ALT (= x ID))))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element15(): void {
		// gunit test on line 143
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x=b", 143);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(= x b)";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element16(): void {
		// gunit test on line 144
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x=(A|B)", 144);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(= x (BLOCK (ALT A) (ALT B)))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element17(): void {
		// gunit test on line 145
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x=~(A|B)", 145);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(= x (~ (SET A B)))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element18(): void {
		// gunit test on line 146
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x+=~(A|B)", 146);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(+= x (~ (SET A B)))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element19(): void {
		// gunit test on line 147
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x+=~(A|B)+", 147);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(+ (BLOCK (ALT (+= x (~ (SET A B))))))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element20(): void {
		// gunit test on line 148
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x=b+", 148);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(+ (BLOCK (ALT (= x b))))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element21(): void {
		// gunit test on line 149
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x+=ID*", 149);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(* (BLOCK (ALT (+= x ID))))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element22(): void {
		// gunit test on line 150
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x+='int'*", 150);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(* (BLOCK (ALT (+= x 'int'))))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element23(): void {
		// gunit test on line 151
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "x+=b+", 151);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(+ (BLOCK (ALT (+= x b))))";
		assertEquals("testing rule element", expecting, actual);
	}

	@Test test_element24(): void {
		// gunit test on line 152
		let rstruct: RuleReturnScope =  (RuleReturnScope)execParser("element", "({blort} 'x')*", 152);
		let actual: any =  ((Tree)rstruct.getTree()).toStringTree();
		let expecting: any =  "(* (BLOCK (ALT {blort} 'x')))";
		assertEquals("testing rule element", expecting, actual);
	}
}
