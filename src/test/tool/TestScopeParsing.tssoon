/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */

// ConvertTo-TS run at 2016-10-04T11:27:34.0991818-07:00

// import org.junit.Test;

// import static org.junit.Assert.*;

export class TestScopeParsing extends BaseTest {
    let argPairs: string[] =  {
        "",                                 "{}",
        " ",                                "{}",
        "int i",                            "{i=int i}",
        "int[] i, int j[]",                 "{i=int[] i, j=int [] j}",
		"Map<A,B>[] i, int j[]",          	"{i=Map<A,B>[] i, j=int [] j}",
		"Map<A,List<B>>[] i",	          	"{i=Map<A,List<B>>[] i}",
        "int i = 34+a[3], int j[] = new int[34]",
                                            "{i=int i= 34+a[3], j=int [] j= new int[34]}",
        "char *foo32[3] = {1,2,3}",     	"{3=char *foo32[] 3= {1,2,3}}",
		"String[] headers",					"{headers=String[] headers}",

        // python/ruby style
        "i",                                "{i=null i}",
        "i,j",                              "{i=null i, j=null j}",
        "i,j, k",                           "{i=null i, j=null j, k=null k}",
    };

    @Test testArgs(): void {
        for (let i = 0; i < argPairs.length; i+=2) {
            let input: string =  argPairs[i];
            let expected: string =  argPairs[i+1];
			let dummy: Grammar =  new Grammar("grammar T; a:'a';");
			let actual: string =  ScopeParser.parseTypedArgList(null, input, dummy).attributes.toString();
            assertEquals(expected, actual);
        }
    }
}
