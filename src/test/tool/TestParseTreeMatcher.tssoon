/*
 * Copyright 2016 Terence Parr, Sam Harwell, and Burt Harris
 * All rights reserved.
 * Licensed under the BSD-3-clause license. See LICENSE file in the project root for license information.
 */
// ConvertTo-TS run at 2016-10-04T11:27:15.0984506-07:00

// import org.junit.Test;

// import static org.junit.Assert.assertEquals;
// import static org.junit.Assert.assertFalse;
// import static org.junit.Assert.assertNotNull;
// import static org.junit.Assert.assertNull;
// import static org.junit.Assert.assertTrue;

export class TestParseTreeMatcher extends BaseTest {
	@Test testChunking(): void {
		let m: ParseTreePatternMatcher =  new ParseTreePatternMatcher(null, null);
		assertEquals("[ID, ' = ', expr, ' ;']", m.split("<ID> = <expr> ;").toString());
		assertEquals("[' ', ID, ' = ', expr]", m.split(" <ID> = <expr>").toString());
		assertEquals("[ID, ' = ', expr]", m.split("<ID> = <expr>").toString());
		assertEquals("[expr]", m.split("<expr>").toString());
		assertEquals("['<x> foo']", m.split("\\<x\\> foo").toString());
		assertEquals("['foo <x> bar ', tag]", m.split("foo \\<x\\> bar <tag>").toString());
	}

	@Test testDelimiters(): void {
		let m: ParseTreePatternMatcher =  new ParseTreePatternMatcher(null, null);
		m.setDelimiters("<<", ">>", "$");
		let result: string =  m.split("<<ID>> = <<expr>> ;$<< ick $>>").toString();
		assertEquals("[ID, ' = ', expr, ' ;<< ick >>']", result);
	}

	@Test testInvertedTags(): void {
		let m: ParseTreePatternMatcher =  new ParseTreePatternMatcher(null, null);
		let result: string =  null;
		try {
			m.split(">expr<");
		}
		catch (IllegalArgumentException iae) {
			result = iae.getMessage();
		}
		let expected: string =  "tag delimiters out of order in pattern: >expr<";
		assertEquals(expected, result);
	}

	@Test testUnclosedTag(): void {
		let m: ParseTreePatternMatcher =  new ParseTreePatternMatcher(null, null);
		let result: string =  null;
		try {
			m.split("<expr hi mom");
		}
		catch (IllegalArgumentException iae) {
			result = iae.getMessage();
		}
		let expected: string =  "unterminated tag in pattern: <expr hi mom";
		assertEquals(expected, result);
	}

	@Test testExtraClose(): void {
		let m: ParseTreePatternMatcher =  new ParseTreePatternMatcher(null, null);
		let result: string =  null;
		try {
			m.split("<expr> >");
		}
		catch (IllegalArgumentException iae) {
			result = iae.getMessage();
		}
		let expected: string =  "missing start tag in pattern: <expr> >";
		assertEquals(expected, result);
	}

	@Test testTokenizingPattern(): void {
		let grammar: string = 
			"grammar X1;\n" +
			"s : ID '=' expr ';' ;\n" +
			"expr : ID | INT ;\n" +
			"ID : [a-z]+ ;\n" +
			"INT : [0-9]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";
		let ok: boolean = 
			rawGenerateAndBuildRecognizer("X1.g4", grammar, "X1Parser", "X1Lexer", false);
		assertTrue(ok);

		let m: ParseTreePatternMatcher =  getPatternMatcher("X1");

		let tokens: List<? extends Token> =  m.tokenize("<ID> = <expr> ;");
		let results: string =  tokens.toString();
		let expected: string =  "[ID:3, [@-1,1:1='=',<1>,1:1], expr:7, [@-1,1:1=';',<2>,1:1]]";
		assertEquals(expected, results);
	}

	@Test
	testCompilingPattern(): void {
		let grammar: string = 
			"grammar X2;\n" +
			"s : ID '=' expr ';' ;\n" +
			"expr : ID | INT ;\n" +
			"ID : [a-z]+ ;\n" +
			"INT : [0-9]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";
		let ok: boolean = 
			rawGenerateAndBuildRecognizer("X2.g4", grammar, "X2Parser", "X2Lexer", false);
		assertTrue(ok);

		let m: ParseTreePatternMatcher =  getPatternMatcher("X2");

		let t: ParseTreePattern =  m.compile("<ID> = <expr> ;", m.getParser().getRuleIndex("s"));
		let results: string =  t.getPatternTree().toStringTree(m.getParser());
		let expected: string =  "(s <ID> = (expr <expr>) ;)";
		assertEquals(expected, results);
	}

	@Test
	testCompilingPatternConsumesAllTokens(): void {
		let grammar: string = 
			"grammar X2;\n" +
			"s : ID '=' expr ';' ;\n" +
			"expr : ID | INT ;\n" +
			"ID : [a-z]+ ;\n" +
			"INT : [0-9]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";
		let ok: boolean = 
			rawGenerateAndBuildRecognizer("X2.g4", grammar, "X2Parser", "X2Lexer", false);
		assertTrue(ok);

		let m: ParseTreePatternMatcher =  getPatternMatcher("X2");

		let failed: boolean =  false;
		try {
			m.compile("<ID> = <expr> ; extra", m.getParser().getRuleIndex("s"));
		}
		catch (ParseTreePatternMatcher.StartRuleDoesNotConsumeFullPattern e) {
			failed = true;
		}
		assertTrue(failed);
	}

	@Test
	testPatternMatchesStartRule(): void {
		let grammar: string = 
			"grammar X2;\n" +
			"s : ID '=' expr ';' ;\n" +
			"expr : ID | INT ;\n" +
			"ID : [a-z]+ ;\n" +
			"INT : [0-9]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";
		let ok: boolean = 
			rawGenerateAndBuildRecognizer("X2.g4", grammar, "X2Parser", "X2Lexer", false);
		assertTrue(ok);

		let m: ParseTreePatternMatcher =  getPatternMatcher("X2");

		let failed: boolean =  false;
		try {
			m.compile("<ID> ;", m.getParser().getRuleIndex("s"));
		}
		catch (InputMismatchException e) {
			failed = true;
		}
		assertTrue(failed);
	}

	@Test
	testPatternMatchesStartRule2(): void {
		let grammar: string = 
			"grammar X2;\n" +
			"s : ID '=' expr ';' | expr ';' ;\n" +
			"expr : ID | INT ;\n" +
			"ID : [a-z]+ ;\n" +
			"INT : [0-9]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";
		let ok: boolean = 
			rawGenerateAndBuildRecognizer("X2.g4", grammar, "X2Parser", "X2Lexer", false);
		assertTrue(ok);

		let m: ParseTreePatternMatcher =  getPatternMatcher("X2");

		let failed: boolean =  false;
		try {
			m.compile("<ID> <ID> ;", m.getParser().getRuleIndex("s"));
		}
		catch (NoViableAltException e) {
			failed = true;
		}
		assertTrue(failed);
	}

	@Test
	testHiddenTokensNotSeenByTreePatternParser(): void {
		let grammar: string = 
			"grammar X2;\n" +
			"s : ID '=' expr ';' ;\n" +
			"expr : ID | INT ;\n" +
			"ID : [a-z]+ ;\n" +
			"INT : [0-9]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> channel(HIDDEN) ;\n";
		let ok: boolean = 
			rawGenerateAndBuildRecognizer("X2.g4", grammar, "X2Parser", "X2Lexer", false);
		assertTrue(ok);

		let m: ParseTreePatternMatcher =  getPatternMatcher("X2");

		let t: ParseTreePattern =  m.compile("<ID> = <expr> ;", m.getParser().getRuleIndex("s"));
		let results: string =  t.getPatternTree().toStringTree(m.getParser());
		let expected: string =  "(s <ID> = (expr <expr>) ;)";
		assertEquals(expected, results);
	}

	@Test
	testCompilingMultipleTokens(): void {
		let grammar: string = 
			"grammar X2;\n" +
			"s : ID '=' ID ';' ;\n" +
			"ID : [a-z]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";
		let ok: boolean = 
			rawGenerateAndBuildRecognizer("X2.g4", grammar, "X2Parser", "X2Lexer", false);
		assertTrue(ok);

		let m: ParseTreePatternMatcher = 	getPatternMatcher("X2");

		let t: ParseTreePattern =  m.compile("<ID> = <ID> ;", m.getParser().getRuleIndex("s"));
		let results: string =  t.getPatternTree().toStringTree(m.getParser());
		let expected: string =  "(s <ID> = <ID> ;)";
		assertEquals(expected, results);
	}

	@Test testIDNodeMatches(): void {
		let grammar: string = 
			"grammar X3;\n" +
			"s : ID ';' ;\n" +
			"ID : [a-z]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";

		let input: string =  "x ;";
		let pattern: string =  "<ID>;";
		checkPatternMatch(grammar, "s", input, pattern, "X3");
	}

	@Test testIDNodeWithLabelMatches(): void {
		let grammar: string = 
			"grammar X8;\n" +
			"s : ID ';' ;\n" +
			"ID : [a-z]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";

		let input: string =  "x ;";
		let pattern: string =  "<id:ID>;";
		let m: ParseTreeMatch =  checkPatternMatch(grammar, "s", input, pattern, "X8");
		assertEquals("{ID=[x], id=[x]}", m.getLabels().toString());
		assertNotNull(m.get("id"));
		assertNotNull(m.get("ID"));
		assertEquals("x", m.get("id").getText());
		assertEquals("x", m.get("ID").getText());
		assertEquals("[x]", m.getAll("id").toString());
		assertEquals("[x]", m.getAll("ID").toString());

		assertNull(m.get("undefined"));
		assertEquals("[]", m.getAll("undefined").toString());
	}

	@Test testLabelGetsLastIDNode(): void {
		let grammar: string = 
			"grammar X9;\n" +
			"s : ID ID ';' ;\n" +
			"ID : [a-z]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";

		let input: string =  "x y;";
		let pattern: string =  "<id:ID> <id:ID>;";
		let m: ParseTreeMatch =  checkPatternMatch(grammar, "s", input, pattern, "X9");
		assertEquals("{ID=[x, y], id=[x, y]}", m.getLabels().toString());
		assertNotNull(m.get("id"));
		assertNotNull(m.get("ID"));
		assertEquals("y", m.get("id").getText());
		assertEquals("y", m.get("ID").getText());
		assertEquals("[x, y]", m.getAll("id").toString());
		assertEquals("[x, y]", m.getAll("ID").toString());

		assertNull(m.get("undefined"));
		assertEquals("[]", m.getAll("undefined").toString());
	}

	@Test testIDNodeWithMultipleLabelMatches(): void {
		let grammar: string = 
			"grammar X7;\n" +
			"s : ID ID ID ';' ;\n" +
			"ID : [a-z]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";

		let input: string =  "x y z;";
		let pattern: string =  "<a:ID> <b:ID> <a:ID>;";
		let m: ParseTreeMatch =  checkPatternMatch(grammar, "s", input, pattern, "X7");
		assertEquals("{ID=[x, y, z], a=[x, z], b=[y]}", m.getLabels().toString());
		assertNotNull(m.get("a")); // get first
		assertNotNull(m.get("b"));
		assertNotNull(m.get("ID"));
		assertEquals("z", m.get("a").getText());
		assertEquals("y", m.get("b").getText());
		assertEquals("z", m.get("ID").getText()); // get last
		assertEquals("[x, z]", m.getAll("a").toString());
		assertEquals("[y]", m.getAll("b").toString());
		assertEquals("[x, y, z]", m.getAll("ID").toString()); // ordered

		assertEquals("xyz;", m.getTree().getText()); // whitespace stripped by lexer

		assertNull(m.get("undefined"));
		assertEquals("[]", m.getAll("undefined").toString());
	}

	@Test testTokenAndRuleMatch(): void {
		let grammar: string = 
			"grammar X4;\n" +
			"s : ID '=' expr ';' ;\n" +
			"expr : ID | INT ;\n" +
			"ID : [a-z]+ ;\n" +
			"INT : [0-9]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";

		let input: string =  "x = 99;";
		let pattern: string =  "<ID> = <expr> ;";
		checkPatternMatch(grammar, "s", input, pattern, "X4");
	}

	@Test testTokenTextMatch(): void {
		let grammar: string = 
			"grammar X4;\n" +
			"s : ID '=' expr ';' ;\n" +
			"expr : ID | INT ;\n" +
			"ID : [a-z]+ ;\n" +
			"INT : [0-9]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";

		let input: string =  "x = 0;";
		let pattern: string =  "<ID> = 1;";
		let invertMatch: boolean =  true; // 0!=1
		checkPatternMatch(grammar, "s", input, pattern, "X4", invertMatch);

		input = "x = 0;";
		pattern = "<ID> = 0;";
		invertMatch = false;
		checkPatternMatch(grammar, "s", input, pattern, "X4", invertMatch);

		input = "x = 0;";
		pattern = "x = 0;";
		invertMatch = false;
		checkPatternMatch(grammar, "s", input, pattern, "X4", invertMatch);

		input = "x = 0;";
		pattern = "y = 0;";
		invertMatch = true;
		checkPatternMatch(grammar, "s", input, pattern, "X4", invertMatch);
	}

	@Test testAssign(): void {
		let grammar: string = 
			"grammar X5;\n" +
			"s   : expr ';'\n" +
			//"    | 'return' expr ';'\n" +
			"    ;\n" +
			"expr: expr '.' ID\n" +
			"    | expr '*' expr\n" +
			"    | expr '=' expr\n" +
			"    | ID\n" +
			"    | INT\n" +
			"    ;\n" +
			"ID : [a-z]+ ;\n" +
			"INT : [0-9]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";

		let input: string =  "x = 99;";
		let pattern: string =  "<ID> = <expr>;";
		checkPatternMatch(grammar, "s", input, pattern, "X5");
	}

	@Test testLRecursiveExpr(): void {
		let grammar: string = 
			"grammar X6;\n" +
			"s   : expr ';'\n" +
			"    ;\n" +
			"expr: expr '.' ID\n" +
			"    | expr '*' expr\n" +
			"    | expr '=' expr\n" +
			"    | ID\n" +
			"    | INT\n" +
			"    ;\n" +
			"ID : [a-z]+ ;\n" +
			"INT : [0-9]+ ;\n" +
			"WS : [ \\r\\n\\t]+ -> skip ;\n";

		let input: string =  "3*4*5";
		let pattern: string =  "<expr> * <expr> * <expr>";
		checkPatternMatch(grammar, "expr", input, pattern, "X6");
	}

	checkPatternMatch(grammar: string, startRule: string, 
											input: string, pattern: string,
											grammarName: string): ParseTreeMatch

	{
		return checkPatternMatch(grammar, startRule, input, pattern, grammarName, false);
	}

	checkPatternMatch(grammar: string, startRule: string, 
											input: string, pattern: string,
											grammarName: string, invertMatch: boolean): ParseTreeMatch

	{
		let grammarFileName: string =  grammarName+".g4";
		let parserName: string =  grammarName+"Parser";
		let lexerName: string =  grammarName+"Lexer";
		let ok: boolean = 
			rawGenerateAndBuildRecognizer(grammarFileName, grammar, parserName, lexerName, false);
		assertTrue(ok);

		let result: ParseTree =  execParser(startRule, input, parserName, lexerName);

		let p: ParseTreePattern =  getPattern(grammarName, pattern, startRule);
		let match: ParseTreeMatch =  p.match(result);
		let matched: boolean =  match.succeeded();
		if ( invertMatch ) assertFalse(matched);
		else assertTrue(matched);
		return match;
	}

	getPattern(grammarName: string, pattern: string, ruleName: string): ParseTreePattern

	{
		let lexerClass: Class<? extends Lexer> =  loadLexerClassFromTempDir(grammarName + "Lexer");
		let ctor: Constructor<? extends Lexer> =  lexerClass.getConstructor(CharStream.class);
		let lexer: Lexer =  ctor.newInstance((CharStream) null);

		let parserClass: Class<? extends Parser> =  loadParserClassFromTempDir(grammarName + "Parser");
		let pctor: Constructor<? extends Parser> =  parserClass.getConstructor(TokenStream.class);
		let parser: Parser =  pctor.newInstance(new CommonTokenStream(lexer));

		return parser.compileParseTreePattern(pattern, parser.getRuleIndex(ruleName));
	}

	getPatternMatcher(grammarName: string): ParseTreePatternMatcher

	{
		let lexerClass: Class<? extends Lexer> =  loadLexerClassFromTempDir(grammarName + "Lexer");
		let ctor: Constructor<? extends Lexer> =  lexerClass.getConstructor(CharStream.class);
		let lexer: Lexer =  ctor.newInstance((CharStream) null);

		let parserClass: Class<? extends Parser> =  loadParserClassFromTempDir(grammarName + "Parser");
		let pctor: Constructor<? extends Parser> =  parserClass.getConstructor(TokenStream.class);
		let parser: Parser =  pctor.newInstance(new CommonTokenStream(lexer));

		return new ParseTreePatternMatcher(lexer, parser);
	}
}
