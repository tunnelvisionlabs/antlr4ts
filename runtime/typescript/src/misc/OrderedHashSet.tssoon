/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */

// ConvertTo-TS run at 2016-10-04T11:26:42.4010795-07:00

/** A HashMap that remembers the order that the elements were added.
 *  You can alter the ith element with set(i,value) too :)  Unique list.
 *  I need the replace/set-element-i functionality so I'm subclassing
 *  LinkedHashSet.
 */
export class OrderedHashSet<T> extends LinkedHashSet<T> {
	private static serialVersionUID: number =  5281944403755906761L;

    /** Track the elements as they are added to the set */
    protected elements: ArrayList<T> =  new ArrayList<T>();

    get(i: number): T {
        return elements.get(i);
    }

    /** Replace an existing value with a new value; updates the element
     *  list and the hash table, but not the key as that has not changed.
     */
    set(i: number, value: T): T {
        let oldElement: T =  elements.get(i);
        elements.set(i,value); // update list
        super.remove(oldElement); // now update the set: remove/add
        super.add(value);
        return oldElement;
    }

	remove(i: number): boolean {
		let o: T =  elements.remove(i);
        return super.remove(o);
	}

    /** Add a value to list; keep in hashtable for consistency also;
     *  Key is object itself.  Good for say asking if a certain string is in
     *  a list of strings.
     */
    @Override
    add(value: T): boolean {
        let result: boolean =  super.add(value);
		if ( result ) {  // only track if new element not in set
			elements.add(value);
		}
		return result;
    }

	@Override
	remove(o: any): boolean {
		throw new UnsupportedOperationException();
    }

	@Override
	clear(): void {
        elements.clear();
        super.clear();
    }

	@Override
	hashCode(): number {
		return elements.hashCode();
	}

	@Override
	equals(o: any): boolean {
		if (!(o instanceof OrderedHashSet<?>)) {
			return false;
		}

//		System.out.print("equals " + this + ", " + o+" = ");
		let same: boolean =  elements!=null && elements.equals(((OrderedHashSet<?>)o).elements);
//		System.out.println(same);
		return same;
	}

	@Override
	iterator(): Iterator<T> {
		return elements.iterator();
	}

	/** Return the List holding list of table elements.  Note that you are
     *  NOT getting a copy so don't write to the list.
     */
    elements(): List<T> {
        return elements;
    }

    @Override
    clone(): any {
        @SuppressWarnings("unchecked") // safe (result of clone)
        let dup: OrderedHashSet<T> =  (OrderedHashSet<T>)super.clone();
        dup.elements = new ArrayList<T>(this.elements);
        return dup;
    }

    @Override
	toArray(): any[] {
		return elements.toArray();
	}

	@Override
	toString(): string {
        return elements.toString();
    }
}
