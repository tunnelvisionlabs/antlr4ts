/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */

// ConvertTo-TS run at 2016-10-04T11:26:39.9974331-07:00

/** Sometimes we need to map a key to a value but key is two pieces of data.
 *  This nested hash table saves creating a single key each time we access
 *  map; avoids mem creation.
 */
export class DoubleKeyMap<Key1, Key2, Value> {
	let data: Map<Key1, Map<Key2, Value>> =  new LinkedHashMap<Key1, Map<Key2, Value>>();

	put(k1: Key1, k2: Key2, v: Value): Value {
		let data2: Map<Key2, Value> =  data.get(k1);
		let prev: Value =  null;
		if ( data2==null ) {
			data2 = new LinkedHashMap<Key2, Value>();
			data.put(k1, data2);
		}
		else {
			prev = data2.get(k2);
		}
		data2.put(k2, v);
		return prev;
	}

	get(k1: Key1, k2: Key2): Value {
		let data2: Map<Key2, Value> =  data.get(k1);
		if ( data2==null ) return null;
		return data2.get(k2);
	}

	get(Key1 k1) { return data.get(k1): Map<Key2, Value>; }

	/** Get all values associated with primary key */
	values(k1: Key1): Collection<Value> {
		let data2: Map<Key2, Value> =  data.get(k1);
		if ( data2==null ) return null;
		return data2.values();
	}

	/** get all primary keys */
	keySet(): Set<Key1> {
		return data.keySet();
	}

	/** get all secondary keys associated with a primary key */
	keySet(k1: Key1): Set<Key2> {
		let data2: Map<Key2, Value> =  data.get(k1);
		if ( data2==null ) return null;
		return data2.keySet();
	}
}
